/**
 * This class is generated by jOOQ
 */
package generated.jooq.tables.records


import java.lang.Boolean
import java.time.LocalDate
import java.util.UUID
import javax.annotation.Generated

import generated.jooq.tables.Caradvert
import model.FuelType
import org.jooq.impl.UpdatableRecordImpl
import org.jooq.{Field, Record1, Record7, Row7}


/**
 * This class is generated by jOOQ.
 */
@Generated(
  value = Array(
    "http://www.jooq.org",
    "jOOQ version:3.8.5"
  ),
  comments = "This class is generated by jOOQ"
)
class CaradvertRecord extends UpdatableRecordImpl[CaradvertRecord](Caradvert.CARADVERT) with Record7[UUID, String, FuelType, Integer, Boolean, Integer, LocalDate] {

  /**
   * Setter for <code>PUBLIC.CARADVERT.ID</code>.
   */
  def setId(value : UUID) : Unit = {
    set(0, value)
  }

  /**
   * Getter for <code>PUBLIC.CARADVERT.ID</code>.
   */
  def getId : UUID = {
    val r = get(0)
    if (r == null) null else r.asInstanceOf[UUID]
  }

  /**
   * Setter for <code>PUBLIC.CARADVERT.TITLE</code>.
   */
  def setTitle(value : String) : Unit = {
    set(1, value)
  }

  /**
   * Getter for <code>PUBLIC.CARADVERT.TITLE</code>.
   */
  def getTitle : String = {
    val r = get(1)
    if (r == null) null else r.asInstanceOf[String]
  }

  /**
   * Setter for <code>PUBLIC.CARADVERT.FUEL</code>.
   */
  def setFuel(value : FuelType) : Unit = {
    set(2, value)
  }

  /**
   * Getter for <code>PUBLIC.CARADVERT.FUEL</code>.
   */
  def getFuel : FuelType = {
    val r = get(2)
    if (r == null) null else r.asInstanceOf[FuelType]
  }

  /**
   * Setter for <code>PUBLIC.CARADVERT.PRICE</code>.
   */
  def setPrice(value : Integer) : Unit = {
    set(3, value)
  }

  /**
   * Getter for <code>PUBLIC.CARADVERT.PRICE</code>.
   */
  def getPrice : Integer = {
    val r = get(3)
    if (r == null) null else r.asInstanceOf[Integer]
  }

  /**
   * Setter for <code>PUBLIC.CARADVERT.ISNEW</code>.
   */
  def setIsnew(value : Boolean) : Unit = {
    set(4, value)
  }

  /**
   * Getter for <code>PUBLIC.CARADVERT.ISNEW</code>.
   */
  def getIsnew : Boolean = {
    val r = get(4)
    if (r == null) null else r.asInstanceOf[Boolean]
  }

  /**
   * Setter for <code>PUBLIC.CARADVERT.MILEAGE</code>.
   */
  def setMileage(value : Integer) : Unit = {
    set(5, value)
  }

  /**
   * Getter for <code>PUBLIC.CARADVERT.MILEAGE</code>.
   */
  def getMileage : Integer = {
    val r = get(5)
    if (r == null) null else r.asInstanceOf[Integer]
  }

  /**
   * Setter for <code>PUBLIC.CARADVERT.FIRSTREGISTRATION</code>.
   */
  def setFirstregistration(value : LocalDate) : Unit = {
    set(6, value)
  }

  /**
   * Getter for <code>PUBLIC.CARADVERT.FIRSTREGISTRATION</code>.
   */
  def getFirstregistration : LocalDate = {
    val r = get(6)
    if (r == null) null else r.asInstanceOf[LocalDate]
  }

  // -------------------------------------------------------------------------
  // Primary key information
  // -------------------------------------------------------------------------
  override def key() : Record1[UUID] = {
    return super.key.asInstanceOf[ Record1[UUID] ]
  }

  // -------------------------------------------------------------------------
  // Record7 type implementation
  // -------------------------------------------------------------------------

  override def fieldsRow : Row7[UUID, String, FuelType, Integer, Boolean, Integer, LocalDate] = {
    super.fieldsRow.asInstanceOf[ Row7[UUID, String, FuelType, Integer, Boolean, Integer, LocalDate] ]
  }

  override def valuesRow : Row7[UUID, String, FuelType, Integer, Boolean, Integer, LocalDate] = {
    super.valuesRow.asInstanceOf[ Row7[UUID, String, FuelType, Integer, Boolean, Integer, LocalDate] ]
  }
  override def field1 : Field[UUID] = Caradvert.CARADVERT.ID
  override def field2 : Field[String] = Caradvert.CARADVERT.TITLE
  override def field3 : Field[FuelType] = Caradvert.CARADVERT.FUEL
  override def field4 : Field[Integer] = Caradvert.CARADVERT.PRICE
  override def field5 : Field[Boolean] = Caradvert.CARADVERT.ISNEW
  override def field6 : Field[Integer] = Caradvert.CARADVERT.MILEAGE
  override def field7 : Field[LocalDate] = Caradvert.CARADVERT.FIRSTREGISTRATION
  override def value1 : UUID = getId
  override def value2 : String = getTitle
  override def value3 : FuelType = getFuel
  override def value4 : Integer = getPrice
  override def value5 : Boolean = getIsnew
  override def value6 : Integer = getMileage
  override def value7 : LocalDate = getFirstregistration

  override def value1(value : UUID) : CaradvertRecord = {
    setId(value)
    this
  }

  override def value2(value : String) : CaradvertRecord = {
    setTitle(value)
    this
  }

  override def value3(value : FuelType) : CaradvertRecord = {
    setFuel(value)
    this
  }

  override def value4(value : Integer) : CaradvertRecord = {
    setPrice(value)
    this
  }

  override def value5(value : Boolean) : CaradvertRecord = {
    setIsnew(value)
    this
  }

  override def value6(value : Integer) : CaradvertRecord = {
    setMileage(value)
    this
  }

  override def value7(value : LocalDate) : CaradvertRecord = {
    setFirstregistration(value)
    this
  }

  override def values(value1 : UUID, value2 : String, value3 : FuelType, value4 : Integer, value5 : Boolean, value6 : Integer, value7 : LocalDate) : CaradvertRecord = {
    this.value1(value1)
    this.value2(value2)
    this.value3(value3)
    this.value4(value4)
    this.value5(value5)
    this.value6(value6)
    this.value7(value7)
    this
  }

  /**
   * Create a detached, initialised CaradvertRecord
   */
  def this(id : UUID, title : String, fuel : FuelType, price : Integer, isnew : Boolean, mileage : Integer, firstregistration : LocalDate) = {
    this()

    set(0, id)
    set(1, title)
    set(2, fuel)
    set(3, price)
    set(4, isnew)
    set(5, mileage)
    set(6, firstregistration)
  }
}
